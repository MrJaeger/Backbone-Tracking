// Generated by CoffeeScript 1.3.3

/*
Backbone Shallow v1.0.0 - An extension of Backbone Models and Collections that allow for linked copies of models and collections.

Copyright (c) 2012
MIT Licensed (LICENSE)

Dependencies: JQuery, Underscore.js, Backbone.js
*/


/* 
A private method that allows for all attributes of a Model/Collection to be copied over to another Model/Collection.
Does not pollute the copied to object with the prototype of the original object
*/


(function() {
  var _extend;

  _extend = function(other) {
    var key, value;
    for (key in other) {
      value = other[key];
      if (other.hasOwnProperty(key)) {
        this[key] = other[key];
      }
    }
    this.__proto__ = other.__proto__;
    return this;
  };

  /*
  Creates a new Backbone Model which is linked to the original.  Options are as follows:
  	updateOnSave: If a function is passed, the function will be called on the shallowModel firing a "sync" event.
  								If a truthy value is passed, the shallowModel will update its linked model on the shallowModel firing a "sync" event.
  	updateOnDestroy: If a function is passed, the function will be called on the shallowModel firing a "destroy" event.
  */


  Backbone.Model.prototype.createShallowModel = function(options) {
    var shallowModel,
      _this = this;
    shallowModel = (new Backbone.Model)._extend(this);
    shallowModel.originalModel = this;
    this.shallowModel = shallowModel;
    if ((options != null ? options.updateOnSave : void 0) != null) {
      shallowModel.on('sync', function() {
        if (typeof cb === "function") {
          return cb();
        } else {
          return _this.commitModelChanges();
        }
      });
    } else if ((options != null ? options.updateOnDestroy : void 0) != null) {
      shallowModel.on('destroy', function() {
        return options.updateOnDestroy();
      });
    }
    return shallowModel;
  };

  /*
  Creates a new Backbone Collection which holds shallowModels of all the models in the original collection.  
  Options passed here are passed along to the shallowModels created, and are the same as those listed above.
  */


  Backbone.Collection.prototype.createShallowCollection = function(options) {
    var model, shallowCollection, tempShallowArray, _i, _len, _ref;
    shallowCollection = (new Backbone.Collection)._extend(this);
    shallowCollection.originalCollection = this;
    this.shallowCollection = shallowCollection;
    tempShallowArray = [];
    _ref = this.models;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      model = _ref[_i];
      tempShallowArray.push(model.createShallowModel(options));
    }
    shallowCollection.models = tempShallowArray;
    return shallowCollection;
  };

  /*
  Sets the original model with all the attributes of the shallowModel
  */


  Backbone.Model.prototype.commitModelChanges = function() {
    return this.originalModel.set(this.attributes);
  };

  /*
  First sets the original model with all the attributes of the shallowModel IF the model is a shallowModel
  If the model is new, it is added to the original collection
  */


  Backbone.Collection.prototype.commitCollectionChanges = function() {
    var model, _i, _len, _ref, _results;
    _ref = this.models;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      model = _ref[_i];
      if (!this.originalCollection.getByCid(model.cid)) {
        _results.push(this.originalCollection.add(model));
      } else if (model.originalModel != null) {
        _results.push(model.commitModelChanges());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  /*
  Clears all events on the shallowModel
  */


  Backbone.Model.prototype.cleanupShallowModel = function() {
    return this.shallowModel.off();
  };

  /*
  Clears all events on the shallowCollection
  If the cleanUpModels flag is set, then all of the collections models (which are shallow) will have their events cleared
  */


  Backbone.Collection.prototype.cleanupShallowCollection = function(cleanUpModels) {
    var model, _i, _len, _ref, _results;
    this.shallowCollection.off();
    if (cleanUpModels != null) {
      _ref = this.shallowCollection.models;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        _results.push(model.off());
      }
      return _results;
    }
  };

  /*
  Protoyping the extend function onto both Backbone Models and Collections
  */


  Backbone.Model.prototype._extend = _extend;

  Backbone.Collection.prototype._extend = _extend;

}).call(this);
