// Generated by CoffeeScript 1.3.3
(function() {

  Backbone.Model.prototype.setSilently = function(attributes) {
    return this.set(attributes, {
      silent: true
    });
  };

  Backbone.Model.prototype.startTracking = function(options) {
    var _this = this;
    this.version = 0;
    this.attributeArray = [$.extend(true, {}, this.attributes)];
    if ((options != null ? options.onChange : void 0) != null) {
      this.on('change', (function() {
        return _this.commit();
      }), this.attributeArray);
    }
    if ((options != null ? options.onSave : void 0) != null) {
      return this.on('sync', (function() {
        if (!((options != null ? options.onChange : void 0) != null)) {
          return _this.commit();
        }
      }), this.attributeArray);
    }
  };

  Backbone.Model.prototype.stopTracking = function() {
    this.off(null, null, this.attributeArray);
    delete this.version;
    return delete this.attributeArray;
  };

  Backbone.Model.prototype.clear = function() {
    return this.setSilently(this.attributeArray[this.version]);
  };

  Backbone.Model.prototype.revert = function(versionsBehind) {
    var versionNumber;
    if (this.version === 0) {
      return;
    }
    versionNumber = this.version - (versionsBehind || 1);
    if (versionNumber >= 0) {
      this.setSilently(this.attributeArray[versionNumber]);
      return this.version = versionNumber;
    }
  };

  Backbone.Model.prototype.revertToOriginal = function() {
    this.setSilently(this.attributeArray[0]);
    return this.version = 0;
  };

  Backbone.Model.prototype.progress = function(versionsAhead) {
    var versionNumber;
    if (this.version === (this.attributeArray.length - 1)) {
      return;
    }
    versionNumber = this.version + (versionsAhead || 1);
    if (versionNumber < this.attributeArray.length) {
      this.setSilently(this.attributeArray[versionNumber]);
      return this.version = versionNumber;
    }
  };

  Backbone.Model.prototype.progressToNewest = function() {
    this.setSilently(this.attributeArray[this.attributeArray.length - 1]);
    return this.version = this.attributeArray.length - 1;
  };

  /* Searches older commits first
  */


  Backbone.Model.prototype.where = function(queryObj) {
    var commit, flag, key, tempVersion, value, _i, _len, _ref;
    tempVersion = 0;
    _ref = this.attributeArray;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      commit = _ref[_i];
      flag = true;
      for (key in queryObj) {
        value = queryObj[key];
        if (this.get(key !== value)) {
          flag = false;
        }
      }
      if (flag === true) {
        this.version = tempVersion;
        this.setSilently(commit);
        return;
      }
    }
  };

  Backbone.Model.prototype.commit = function() {
    this.version++;
    return this.attributeArray.push($.extend(true, {}, this.attributes));
  };

}).call(this);
